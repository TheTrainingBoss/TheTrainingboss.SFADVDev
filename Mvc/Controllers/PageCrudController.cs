/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.9
</auto-generated>
------------------------------------------------------------------------------ */

using TheTrainingboss.SFADVDev.Mvc.Models;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;
using Telerik.Sitefinity.Modules.Pages;
using System.Linq;
using Telerik.Sitefinity.GenericContent.Model;
using System;
using Telerik.Sitefinity.Pages.Model;
using Telerik.Sitefinity.Abstractions;
using System.Text.RegularExpressions;
using Telerik.Sitefinity.Security.Claims;
using System.Collections.Generic;
using Telerik.Sitefinity.Workflow;

namespace TheTrainingboss.SFADVDev.Mvc.Controllers
{
	[ControllerToolboxItem(Name = "PageCrud", Title = "Page Crud", SectionName = "SFADVDev")]
	public class PageCrudController : Controller, IPersonalizable
	{
		PageManager pm = PageManager.GetManager();
		// GET: PageCrud
		public ActionResult Index()
		{
			
			var pages = pm.GetPageDataList().Where(p => p.Status == ContentLifecycleStatus.Live)
											.Select(p => p.NavigationNode)
											.Where(n => !n.IsBackend && !n.IsDeleted); ;
			var model = new PageCrudModel(pages);
			
			return View(model);
		}

		public ActionResult CreatePage()
        {
			var name = "The Training Boss Page";
			var id = Guid.NewGuid();

			PageNode parent = pm.GetPageNode(SiteInitializer.CurrentFrontendRootNodeId);
			PageNode pageNode = pm.CreatePage(parent, id, NodeType.Standard);
			pageNode.Name = name.ToLower();
			pageNode.Title = name;
			pageNode.Description = name;
			pageNode.UrlName = Regex.Replace(name.ToLower(), @"[^\w\-\!\$\'\(\)\=\@\d_]+", "-");
			pageNode.ShowInNavigation = true;
			pageNode.DateCreated = DateTime.Now;
			pageNode.LastModified = DateTime.UtcNow;
			pageNode.Owner = ClaimsManager.GetCurrentUserId();
			PageData pageData = pageNode.GetPageData();
			pageData.HtmlTitle = name + " Title for search engines";
			pageData.Visible = true;
			pm.SaveChanges();

			var bag = new Dictionary<string, string>();
			bag.Add("ContentType", typeof(PageNode).FullName);
			WorkflowManager.MessageWorkflow(id, typeof(PageNode), null, "Publish", false, bag);

			return View();
        }

			
        protected override void HandleUnknownAction(string actionName)
        {
            this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
        }

		
	}
}